# import library
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf

from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.models import Sequential
from tensorflow.keras.callbacks import ModelCheckpoint

# 데이터 불러오기

fashion_mnist = tf.keras.datasets.fashion_mnist
(x_train, y_train), (x_valid, y_valid) = fashion_mnist.load_data() # load_data뒤에 () 괄호 빼먹지 말기

# 데이터 형식 보기
print(x_train.shape, y_train.shape, x_valid.shape, y_valid.shape)

# 데이터 정규화(normalization)
print(x_train.min(), x_train.max())

x_train = x_train / 255.0
x_valid = x_valid / 255.0
print(x_train.min(), x_train.max())

# 데이터 시각화
# 시각화
fig, axes = plt.subplots(2, 5) # 2행 5열의 subplot 만들기
fig.set_size_inches(10, 5)

for i in range(10):
    axes[i//5, i%5].imshow(x_train[i], cmap='gray')
    axes[i//5, i%5].set_title(str(y_train[i]), fontsize=15)
    plt.setp( axes[i//5, i%5].get_xticklabels(), visible=False)
    plt.setp( axes[i//5, i%5].get_yticklabels(), visible=False)
    axes[i//5, i%5].axis('off')

plt.tight_layout()
plt.show()

# 모델 정의
model = Sequential([
    # Flatten으로 shape 펼치기
    Flatten(input_shape=(28, 28)),
    # Dense Layer
    Dense(1024, activation='relu'),
    Dense(512, activation='relu'),
    Dense(256, activation='relu'),
    Dense(128, activation='relu'),
    Dense(64, activation='relu'),
    # Classification을 위한 Softmax 
    Dense(10, activation='softmax'),
])

model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['acc'])

checkpoint_path = "my_checkpoint.ckpt"
checkpoint = ModelCheckpoint(filepath=checkpoint_path, 
                             save_weights_only=True, 
                             save_best_only=True, 
                             monitor='val_loss', 
                             verbose=1)
history = model.fit(x_train, y_train, validation_data = (x_valid, y_valid),
          verbose = 1,
          callbacks = [checkpoint],
          epochs = 20,)

# 가중치 load_weights로 다시 불러 오기!
model.load_weights(checkpoint_path)

# 학습 후 검증.
model.evaluate(x_valid, y_valid)

# Loss 그래프로 그리기
plt.figure(figsize = (12, 9))
plt.plot(np.arange(1, 21), history.history['loss'])
plt.plot(np.arange(1, 21), history.history['val_loss'])
plt.title('Loss / Val Loss', fontsize = 20)
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend(['loss', 'val_loss'], fontsize = 15)
plt.show()
