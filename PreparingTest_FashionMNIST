# ======================================================================
# There are 5 questions in this test with increasing difficulty from 1-5
# Please note that the weight of the grade for the question is relative
# to its difficulty. So your Category 1 question will score much less
# than your Category 5 question.
# ======================================================================
#
# Basic Datasets Question
#
# Create a classifier for the Fashion MNIST dataset
# Note that the test will expect it to classify 10 classes and that the 
# input shape should be the native size of the Fashion MNIST dataset which is 
# 28x28 monochrome. Do not resize the data. YOur input layer should accept
# (28,28) as the input shape only. If you amend this, the tests will fail.
#

# =========== 합격 기준 가이드라인 공유 ============= #
# val_loss 기준에 맞춰 주시는 것이 훨씬 더 중요 #
# val_loss 보다 조금 높아도 상관없음. (언저리까지 OK) #
# =================================================== #
# 문제명: Category 2 - fashion mnist
# val_loss: 0.33
# val_acc: 0.89
# =================================================== #
# =================================================== #
# model1: val_loss: 0.31863

import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf

from tensorflow.keras.layers import Dense, Flatten, Dropout, Reshape, Conv2D, MaxPooling2D
from tensorflow.keras.models import Sequential
from tensorflow.keras.callbacks import ModelCheckpoint

def solution_model():
    fashion_mnist = tf.keras.datasets.fashion_mnist
    

    # YOUR CODE HERE
    (x_train, y_train), (x_valid, y_valid) = fashion_mnist.load_data() # load_data뒤에 () 괄호 빼먹지 말기
    print(x_train.shape)

    # 데이터 형식 보기
    print(x_train.shape, y_train.shape, x_valid.shape, y_valid.shape)

    # 데이터 정규화(normalization)
    print(x_train.min(), x_train.max())

    x_train = x_train / 255.0
    x_valid = x_valid / 255.0
    print(x_train.min(), x_train.max())

    # 모델 정의
    model = Sequential([
    # Flatten으로 shape 펼치기
        Reshape((28, 28, 1),input_shape=(28, 28)),
    # Dense Layer
        Conv2D(128, (3,3), activation = 'relu'),
        MaxPooling2D(2,2),
        Conv2D(64, (3,3), activation = 'relu'),
        MaxPooling2D(2,2),
        Conv2D(32, (3,3), activation = 'relu'),
        MaxPooling2D(2,2),
    # Classification을 위한 Softmax
        Dense(32, activation = 'relu'),
        Dense(10, activation='softmax'),
    ])

    model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['acc'])

    checkpoint_path = "my_checkpoint.ckpt"
    checkpoint = ModelCheckpoint(filepath=checkpoint_path, 
                             save_weights_only=True, 
                             save_best_only=True, 
                             monitor='val_loss', 
                             verbose=1)
    
    history = model.fit(x_train, y_train, validation_data = (x_valid, y_valid),
          verbose = 1,
          callbacks = [checkpoint],
          epochs = 20)
    # YOUR CODE HERE



    return model



    
    return model


# Note that you'll need to save your model as a .h5 like this
# This .h5 will be uploaded to the testing infrastructure
# and a score will be returned to you
if __name__ == '__main__':
    model = solution_model()
    model.save("TF2-fashion-mnist.h5")
